{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,cAAeJ,SAASC,cAAc,wBACtCI,UAAWL,SAASC,cAAc,0BAG9BK,EAAc,GA0BpB,SAASC,EAAcC,EAAOC,GAC5B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGpCC,YAAW,KACTJ,EAAQ,C,MAAEH,E,SAAOC,GAAW,GAC3BD,GAEHO,YAAW,KACTH,EAAO,C,MAAEJ,E,SAAOC,GAAW,GAC1BD,EAAM,G,CApCfV,EAAKC,KAAKiB,iBAAiB,SAG3B,SAAkBC,GAChBX,EAAYW,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,K,IAHxCtB,EAAKC,KAAKiB,iBAAiB,UAM3B,SAAsBC,GACpBA,EAAEI,iBACF,IAAMb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,GAAWlB,EAC9B,IAAK,IAAImB,EAAI,EAAGA,GAAKD,EAAQC,IAC3BC,WAAaJ,IAASC,EAAOE,EAC7BE,aAAeF,EAAI,EACnBG,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,WAEZnB,EAAcmB,UAAWC,cACtBG,MAAK,EAACtB,MAAEA,EAAKC,SAAEA,MACdb,EAAAmC,OAAOC,QAAQ,uBAAqBvB,QAAiBD,MAAU,IAEhEyB,OAAM,EAACzB,MAAEA,EAAKC,SAAEA,MACfb,EAAAmC,OAAOG,QAAQ,sBAAoBzB,QAAeD,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector(`input[name=\"delay\"]`),\n  delayStep: document.querySelector(`input[name=\"step\"]`),\n  promiseAmount: document.querySelector(`input[name=\"amount\"]`),\n  submitBtn: document.querySelector(`button[type=\"submit\"]`),\n};\n\nconst promiseData = {};\nrefs.form.addEventListener('input', formData);\nrefs.form.addEventListener(`submit`, onFormSubmit);\n\nfunction formData(e) {\n  promiseData[e.target.name] = e.target.value;\n}\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  let { delay, step, amount } = promiseData;\n  for (let i = 0; i < +amount; i++) {\n    thisDelay = +delay + +step * i;\n    thisPosition = i + 1;\n    console.log(i);\n    console.log(thisDelay);\n\n    createPromise(thisDelay, thisPosition)\n      .then(({ delay, position }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ delay, position }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\nfunction createPromise(delay, position) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      setTimeout(() => {\n        resolve({ delay, position });\n      }, delay);\n    } else {\n      setTimeout(() => {\n        reject({ delay, position });\n      }, delay);\n    }\n  });\n}\n"],"names":["$9EgcF","parcelRequire","$75aa520dfb7f3d3e$var$refs","form","document","querySelector","delayInput","delayStep","promiseAmount","submitBtn","$75aa520dfb7f3d3e$var$promiseData","$75aa520dfb7f3d3e$var$createPromise","delay","position","Promise","resolve","reject","Math","random","setTimeout","addEventListener","e","target","name","value","preventDefault","delay1","step","amount","i","thisDelay","thisPosition","console","log","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.0af809e1.js.map"}